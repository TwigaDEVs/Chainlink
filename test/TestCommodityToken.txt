// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "truffle/Assert.sol";
import "../contracts/CommodityToken.sol";

contract TestCommodityToken {
    CommodityToken commodityToken;
    
    function beforeEach() public {
        commodityToken = new CommodityToken("CommodityToken", "CT");
    }
    
    function testMint() public {
        uint256 tokenId = 1;
        commodityToken.mint(tokenId);
        
        uint256 actualProcess = commodityToken.processes(tokenId);
        uint256 expectedProcess = 1;
        
        Assert.equal(actualProcess, expectedProcess, "Token did not start at process 1");
    }
    
    function testMoveToNextProcess() public {
        uint256 tokenId = 1;
        commodityToken.mint(tokenId);
        commodityToken.moveToNextProcess(tokenId);
        
        uint256 actualProcess = commodityToken.processes(tokenId);
        uint256 expectedProcess = 2;
        
        Assert.equal(actualProcess, expectedProcess, "Token did not move to the next process");
    }
    
    function testMoveToNextProcess_invalidOwner() public {
        uint256 tokenId = 1;
        commodityToken.mint(tokenId);
        
        // Attempt to move the token from an account that is not the owner
        address notOwner = address(0x1234567890123456789012345678901234567890);
        (bool success, ) = address(commodityToken).call(
            abi.encodeWithSignature("moveToNextProcess(uint256)", tokenId),
            { from: notOwner }
        );
        
        Assert.isFalse(success, "Token was moved by an account that is not the owner");
    }
    
    function testMoveToNextProcess_alreadyCompleted() public {
        uint256 tokenId = 1;
        commodityToken.mint(tokenId);
        
        // Move the token through all processes
        for (uint256 i = 2; i <= 12; i++) {
            commodityToken.moveToNextProcess(tokenId);
        }
        
        // Attempt to move the token to the next process after it has already completed all processes
        (bool success, ) = address(commodityToken).call(
            abi.encodeWithSignature("moveToNextProcess(uint256)", tokenId)
        );
        
        Assert.isFalse(success, "Token was moved to a non-existent process");
    }
}
